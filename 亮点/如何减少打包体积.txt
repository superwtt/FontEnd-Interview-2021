#### 减少打包体积

因为当时那款项目，是跟国外联合的，想要看到一些分享的效果，必须每次都打包部署，而又因为跟国外的团队一起合作的项目，国外的团队选用的技术比较老套，所以项目很庞大，很复杂；所以优化打包时间，提高审查效率很关键。

1. 升级技术工具，什么node/npm的版本都看看，

2. 使用`webpack-bundle-analyzer`分析我这个项目的打包情况，包括每个包的体积，每个包里面的包的一些情况，每个文件的占用面积越大，说明该文件越大，找到相关的文件去优化即可

3. 使用include或者exclude配置，来避免重复打包：include 来指定编译文件夹；exclude 来指定排除文件夹

4. 合理的利用缓存来减少打包时间：如果文件没有改动则使用缓存

   ```javascript
   {
       test:/\.js$/,
       use:[
           'cache-loader',
           'babel-loader'
       ],
       include: path.resolve('src')    
   }
   ```

   

5. 合理使用 plugin，减少打包体积

6. 启用多线程打包

7. 使用DllPlugin插件，优化提高打包时间：一些公共用的不改动的库，比如jquery、vue、react，几个月都不会更新一次，那我们就不需要重复打包了，只需要打包一次就行，下次打包只引用即可

8. 合理使用hash，如果没改动的文件，命中缓存

9. 提取公共代码，代码分割：使用 webpack 给我们提供的 optimization 属性

10. 使用 Tree-Shaking 去除无用代码，减少代码体积：配置

    ```
    mode: 'production'
    ```

---

#### 总结

我主要就是做了几件事，我记得当时打包是60-70s左右，优化之后，打包时间在25s左右，有的时候网络好会在18s左右

+ node/npm 这些工具，能升级的都升级看看
+ include/exclude，指定打包的和排除的文件夹
+ 没有改动的js文件让它走缓存，配置的是cache-loader
+ 不怎么改动的公共库，比如jquery、vue、react几个月都不会更新的，使用的是DllPluin这个插件，只打包一次即可，下次打包直接走manifest引用
+ 提取公共代码，因为是多人合作开发，类似的功能不同的人写会发生代码重复，使用 webpack 的 optimization属性

---

#### 提高首屏加载速度

1. 图片资源的压缩：因为项目中有商品的展示、活动的展示，图片都很大，所以做了一个图片压缩的处理。压缩的图片清晰度没那么高了，在一些清晰度要求高的图片上，做的是静态资源放在cdn上
2. 路由懒加载，把不同路由对应的组件分割成不同的代码块，待路由被请求的时候会单独打包路由，使得入口文件变小，加载速度也会增加
3. UI 按需加载，不要一下子将 elementui 直接全部引入，而是只引用我们用到的组件，比如按钮、分页、警告等等
4. 组件重复打包，比如A.js这个文件是一个常用的库，现在有多个路由使用到它，这就造成了重复下载，在 webpack 的 CommonsChunkPlugin 配置 minChunks，将重复3次以上的包抽离出来

---

#### 参考链接

[掘金](https://juejin.cn/post/6844904174937718792)